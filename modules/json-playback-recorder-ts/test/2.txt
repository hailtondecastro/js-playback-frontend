        it('RecorderManagerDefault.master-min-detail-min-test-sync', (done) => {
            let newCacheHandler = ForNodeTest.createCacheHandlerWithInterceptor(ForNodeTest.CacheHandlerSync);

            let recorderSession: RecorderSession;
            let config: RecorderConfig = new RecorderConfigDefault()
                .configLogLevel(RecorderLogger.All, RecorderLogLevel.Error)
                .configCacheHandler(newCacheHandler)
                .configAddFieldProcessors(ForNodeTest.TypeProcessorEntriesSync);
                
            let asyncCount = new AsyncCount();
            let asyncCountdown = new AsyncCountdown({ count: 4, timeOut: 1000});

            newCacheHandler.callback = (operation, cacheKey, stream) => {
                // console.log(operation + ', ' + cacheKey + ', ' + stream);
            }

            let propertyOptionsString: RecorderDecorators.PropertyOptions<String> =
                Reflect.getMetadata(RecorderConstants.REFLECT_METADATA_PLAYER_OBJECT_PROPERTY_OPTIONS, new MasterAEnt(), 'vcharA');
            let propertyOptionsBlobDirectRaw: RecorderDecorators.PropertyOptions<BinaryStream> =
                Reflect.getMetadata(RecorderConstants.REFLECT_METADATA_PLAYER_OBJECT_PROPERTY_OPTIONS, new MasterAEnt(), 'blobLazyA');
            let propertyOptionsClobDirectRaw: RecorderDecorators.PropertyOptions<StringStream> =
                Reflect.getMetadata(RecorderConstants.REFLECT_METADATA_PLAYER_OBJECT_PROPERTY_OPTIONS, new MasterAEnt(), 'clobLazyA');
            let propertyOptionsBlob: RecorderDecorators.PropertyOptions<Buffer> =
                Reflect.getMetadata(RecorderConstants.REFLECT_METADATA_PLAYER_OBJECT_PROPERTY_OPTIONS, new MasterAEnt(), 'blobA');

            propertyOptionsString.fieldProcessorEvents.onFromLiteralValue = (rawValue, info, obs) => {
                return obs.pipe(
                    (source) => {
                        chai.expect(info.fieldName)
                            .to.satisfy(
                                (fieldName: string) => {
                                    return fieldName === 'vcharA' || fieldName === 'vcharB';
                                }
                            );
                        return source;
                    }
                )
                .pipe(
                    asyncCount.registerRxOpr()
                );
            };

            propertyOptionsBlobDirectRaw.fieldProcessorEvents.onFromLiteralValue = (rawValue, info, obs) => {
                return obs.pipe(
                    (source) => {
                        chai.expect(info.fieldName)
                            .to.satisfy(
                                (fieldName: string) => {
                                    return fieldName === 'blobLazyA' || fieldName === 'blobLazyB';
                                }
                            );
                        return source;
                    }
                )
                .pipe(
                    asyncCount.registerRxOpr(),
                    asyncCountdown.registerRxOpr()
                );
            };

            propertyOptionsClobDirectRaw.fieldProcessorEvents.onFromLiteralValue = (rawValue, info, obs) => {
                return obs.pipe(
                    (source) => {
                        chai.expect(info.fieldName)
                            .to.satisfy(
                                (fieldName: string) => {
                                    return fieldName === 'clobLazyA' || fieldName === 'clobLazyB';
                                }
                            );
                        return source;
                    }
                )
                .pipe(
                    asyncCount.registerRxOpr(),
                    asyncCountdown.registerRxOpr()
                );;
            };

            propertyOptionsBlob.fieldProcessorEvents.onFromLiteralValue = (rawValue, info, obs) => {
                return obs.pipe(
                    (source) => {
                        chai.expect(info.fieldName)
                            .to.satisfy(
                                (fieldName: string) => {
                                    return fieldName === 'blobA' || fieldName === 'blobB';
                                }
                            );
                        return source;
                    }
                )
                .pipe(
                    asyncCount.registerRxOpr(),
                    asyncCountdown.registerRxOpr()
                );
            };

            config.configLazyObservableProvider(
                {
                    generateObservable: (signature, info) => {
                        let responseResult: ResponseLike<Object> = {
                            body: null
                        }
                        return of(responseResult);
                    },
                    generateObservableForDirectRaw: (signature, info) => {
                        let responseResult: ResponseLike<BinaryStream> = {
                            body: null
                        }
                        return of(responseResult);
                    }
                });

            let manager: RecorderManager = new RecorderManagerDefault(
                config
                );

            let propertyOptions: RecorderDecorators.PropertyOptions<Buffer> =
                Reflect.getMetadata(RecorderConstants.REFLECT_METADATA_PLAYER_OBJECT_PROPERTY_OPTIONS, new MasterAEnt(), 'blobLazyA');

            propertyOptions.fieldProcessorEvents.onFromLiteralValue = (rawValue, info, obs) => {
                return obs.pipe(
                    (source) => {
                        return source;
                    }
                )
                .pipe(
                    asyncCount.registerRxOpr(),
                    asyncCountdown.registerRxOpr()
                );;
            }

            recorderSession = manager.createSession();
            let master$: Observable<MasterMinEnt> = recorderSession.processPlayerSnapshot(MasterMinEnt, pSnapshotMasterMinDetailMinTestLiteral)
                .pipe(
                    asyncCount.registerRxOpr(),
                    asyncCountdown.registerRxOpr(),
                );
            master$.subscribe(
                {
                    next: (masterA) => {
                        let detailAEntCol$ = masterA.detailAEntCol.asObservable()
                            .pipe(
                                asyncCount.registerRxOpr(),
                                asyncCountdown.registerRxOpr()
                            );
                        let sub = detailAEntCol$.subscribe((coll) => {
                            asyncCount.doNonObservableIncrement();
                            let detailAEntArr = Array.from(coll);
                            for (let index = 0; index < detailAEntArr.length; index++) {
                                const detailAItem = detailAEntArr[index];
                                let compIdMasterA$ = detailAItem.compId.masterA.asObservable()
                                    .pipe(
                                        asyncCount.registerRxOpr(),
                                        asyncCountdown.registerRxOpr()
                                    );
                                let subB = compIdMasterA$.subscribe( (detMasterA) => {
                                    chai.expect(masterA)
                                        .to.eq(detMasterA);
                                    if (subB) {
                                        subB.unsubscribe();
                                    }
                                });
                            }
                            if (sub) {
                                sub.unsubscribe();
                            }
                        });
                    }
                }
            );

            asyncCountdown.createCountdownEnds().pipe(
                flatMap(() => {
                    return recorderSession.createSerialPendingTasksWaiting()
                }),
                catchError((err, caugth) => {
                    return throwError(err);
                })
            ).subscribe(() => {
                chai.expect(asyncCount.count).to.eq(5, 'asyncCount');
                done();
            });
        });